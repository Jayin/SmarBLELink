{"version":3,"sources":["crc.js","crcUtil.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar crcUtil_1 = require(\"./crcUtil\");\r\nvar CRC = (function () {\r\n    function CRC(name, width, polynomial, initial, finalXor, inputReflected, resultReflected) {\r\n        this.width = width;\r\n        this.name = name;\r\n        this.polynomial = polynomial;\r\n        this.initial = initial;\r\n        this.finalXor = finalXor;\r\n        this.inputReflected = inputReflected;\r\n        this.resultReflected = resultReflected;\r\n    }\r\n    Object.defineProperty(CRC.prototype, \"width\", {\r\n        get: function () { return this._width; },\r\n        set: function (v) {\r\n            this._width = v;\r\n            switch (v) {\r\n                case 8:\r\n                    this._castMask = 0xFF;\r\n                    break;\r\n                case 16:\r\n                    this._castMask = 0xFFFF;\r\n                    break;\r\n                case 32:\r\n                    this._castMask = 0xFFFFFFFF;\r\n                    break;\r\n                default:\r\n                    throw \"Invalid CRC width\";\r\n            }\r\n            this._msbMask = 0x01 << (v - 1);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"name\", {\r\n        get: function () { return this._name; },\r\n        set: function (v) {\r\n            this._name = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"polynomial\", {\r\n        get: function () { return this._polynomial; },\r\n        set: function (v) {\r\n            this._polynomial = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"initial\", {\r\n        get: function () { return this._initialVal; },\r\n        set: function (v) {\r\n            this._initialVal = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"finalXor\", {\r\n        get: function () { return this._finalXorVal; },\r\n        set: function (v) {\r\n            this._finalXorVal = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"inputReflected\", {\r\n        get: function () { return this._inputReflected; },\r\n        set: function (v) {\r\n            this._inputReflected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC.prototype, \"resultReflected\", {\r\n        get: function () { return this._resultReflected; },\r\n        set: function (v) {\r\n            this._resultReflected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CRC, \"defaults\", {\r\n        get: function () {\r\n            if (!this._list) {\r\n                this._list = [\r\n                    new CRC(\"CRC8\", 8, 0x07, 0x00, 0x00, false, false),\r\n                    new CRC(\"CRC8_SAE_J1850\", 8, 0x1D, 0xFF, 0xFF, false, false),\r\n                    new CRC(\"CRC8_SAE_J1850_ZERO\", 8, 0x1D, 0x00, 0x00, false, false),\r\n                    new CRC(\"CRC8_8H2F\", 8, 0x2F, 0xFF, 0xFF, false, false),\r\n                    new CRC(\"CRC8_CDMA2000\", 8, 0x9B, 0xFF, 0x00, false, false),\r\n                    new CRC(\"CRC8_DARC\", 8, 0x39, 0x00, 0x00, true, true),\r\n                    new CRC(\"CRC8_DVB_S2\", 8, 0xD5, 0x00, 0x00, false, false),\r\n                    new CRC(\"CRC8_EBU\", 8, 0x1D, 0xFF, 0x00, true, true),\r\n                    new CRC(\"CRC8_ICODE\", 8, 0x1D, 0xFD, 0x00, false, false),\r\n                    new CRC(\"CRC8_ITU\", 8, 0x07, 0x00, 0x55, false, false),\r\n                    new CRC(\"CRC8_MAXIM\", 8, 0x31, 0x00, 0x00, true, true),\r\n                    new CRC(\"CRC8_ROHC\", 8, 0x07, 0xFF, 0x00, true, true),\r\n                    new CRC(\"CRC8_WCDMA\", 8, 0x9B, 0x00, 0x00, true, true),\r\n                    new CRC(\"CRC16_CCIT_ZERO\", 16, 0x1021, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC16_ARC\", 16, 0x8005, 0x0000, 0x0000, true, true),\r\n                    new CRC(\"CRC16_AUG_CCITT\", 16, 0x1021, 0x1D0F, 0x0000, false, false),\r\n                    new CRC(\"CRC16_BUYPASS\", 16, 0x8005, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC16_CCITT_FALSE\", 16, 0x1021, 0xFFFF, 0x0000, false, false),\r\n                    new CRC(\"CRC16_CDMA2000\", 16, 0xC867, 0xFFFF, 0x0000, false, false),\r\n                    new CRC(\"CRC16_DDS_110\", 16, 0x8005, 0x800D, 0x0000, false, false),\r\n                    new CRC(\"CRC16_DECT_R\", 16, 0x0589, 0x0000, 0x0001, false, false),\r\n                    new CRC(\"CRC16_DECT_X\", 16, 0x0589, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC16_DNP\", 16, 0x3D65, 0x0000, 0xFFFF, true, true),\r\n                    new CRC(\"CRC16_EN_13757\", 16, 0x3D65, 0x0000, 0xFFFF, false, false),\r\n                    new CRC(\"CRC16_GENIBUS\", 16, 0x1021, 0xFFFF, 0xFFFF, false, false),\r\n                    new CRC(\"CRC16_MAXIM\", 16, 0x8005, 0x0000, 0xFFFF, true, true),\r\n                    new CRC(\"CRC16_MCRF4XX\", 16, 0x1021, 0xFFFF, 0x0000, true, true),\r\n                    new CRC(\"CRC16_RIELLO\", 16, 0x1021, 0xB2AA, 0x0000, true, true),\r\n                    new CRC(\"CRC16_T10_DIF\", 16, 0x8BB7, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC16_TELEDISK\", 16, 0xA097, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC16_TMS37157\", 16, 0x1021, 0x89EC, 0x0000, true, true),\r\n                    new CRC(\"CRC16_USB\", 16, 0x8005, 0xFFFF, 0xFFFF, true, true),\r\n                    new CRC(\"CRC16_A\", 16, 0x1021, 0xC6C6, 0x0000, true, true),\r\n                    new CRC(\"CRC16_KERMIT\", 16, 0x1021, 0x0000, 0x0000, true, true),\r\n                    new CRC(\"CRC16_MODBUS\", 16, 0x8005, 0xFFFF, 0x0000, true, true),\r\n                    new CRC(\"CRC16_X_25\", 16, 0x1021, 0xFFFF, 0xFFFF, true, true),\r\n                    new CRC(\"CRC16_XMODEM\", 16, 0x1021, 0x0000, 0x0000, false, false),\r\n                    new CRC(\"CRC32\", 32, 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, true, true),\r\n                    new CRC(\"CRC32_BZIP2\", 32, 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, false, false),\r\n                    new CRC(\"CRC32_C\", 32, 0x1EDC6F41, 0xFFFFFFFF, 0xFFFFFFFF, true, true),\r\n                    new CRC(\"CRC32_D\", 32, 0xA833982B, 0xFFFFFFFF, 0xFFFFFFFF, true, true),\r\n                    new CRC(\"CRC32_MPEG2\", 32, 0x04C11DB7, 0xFFFFFFFF, 0x00000000, false, false),\r\n                    new CRC(\"CRC32_POSIX\", 32, 0x04C11DB7, 0x00000000, 0xFFFFFFFF, false, false),\r\n                    new CRC(\"CRC32_Q\", 32, 0x814141AB, 0x00000000, 0x00000000, false, false),\r\n                    new CRC(\"CRC32_JAMCRC\", 32, 0x04C11DB7, 0xFFFFFFFF, 0x00000000, true, true),\r\n                    new CRC(\"CRC32_XFER\", 32, 0x000000AF, 0x00000000, 0x00000000, false, false)\r\n                ];\r\n            }\r\n            return this._list;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CRC.prototype.makeCrcTable = function () {\r\n        this._crcTable = new Array(256);\r\n        for (var divident = 0; divident < 256; divident++) {\r\n            var currByte = (divident << (this._width - 8)) & this._castMask;\r\n            for (var bit = 0; bit < 8; bit++) {\r\n                if ((currByte & this._msbMask) != 0) {\r\n                    currByte <<= 1;\r\n                    currByte ^= this._polynomial;\r\n                }\r\n                else {\r\n                    currByte <<= 1;\r\n                }\r\n            }\r\n            this._crcTable[divident] = (currByte & this._castMask);\r\n        }\r\n    };\r\n    CRC.prototype.makeCrcTableReversed = function () {\r\n        this._crcTable = new Array(256);\r\n        for (var divident = 0; divident < 256; divident++) {\r\n            var reflectedDivident = crcUtil_1.default.Reflect8(divident);\r\n            var currByte = (reflectedDivident << (this._width - 8)) & this._castMask;\r\n            for (var bit = 0; bit < 8; bit++) {\r\n                if ((currByte & this._msbMask) != 0) {\r\n                    currByte <<= 1;\r\n                    currByte ^= this._polynomial;\r\n                }\r\n                else {\r\n                    currByte <<= 1;\r\n                }\r\n            }\r\n            currByte = crcUtil_1.default.ReflectGeneric(currByte, this.width);\r\n            this._crcTable[divident] = (currByte & this._castMask);\r\n        }\r\n    };\r\n    CRC.prototype.compute = function (bytes) {\r\n        if (!this._crcTable)\r\n            this.makeCrcTable();\r\n        var crc = this._initialVal;\r\n        for (var i = 0; i < bytes.length; i++) {\r\n            var curByte = bytes[i] & 0xFF;\r\n            if (this.inputReflected) {\r\n                curByte = crcUtil_1.default.Reflect8(curByte);\r\n            }\r\n            crc = (crc ^ (curByte << (this._width - 8))) & this._castMask;\r\n            var pos = (crc >> (this.width - 8)) & 0xFF;\r\n            crc = (crc << 8) & this._castMask;\r\n            crc = (crc ^ this._crcTable[pos]) & this._castMask;\r\n        }\r\n        if (this.resultReflected) {\r\n            crc = crcUtil_1.default.ReflectGeneric(crc, this.width);\r\n        }\r\n        return ((crc ^ this._finalXorVal) & this._castMask);\r\n    };\r\n    CRC.prototype.computeBuffer = function (bytes) {\r\n        var val = this.compute(bytes);\r\n        if (this.width === 8) {\r\n            return Buffer.from([val]);\r\n        }\r\n        else if (this.width === 16) {\r\n            var b = Buffer.alloc(2);\r\n            b.writeUInt16BE(val, 0);\r\n            return b;\r\n        }\r\n        else if (this.width === 32) {\r\n            var b = Buffer.alloc(4);\r\n            b.writeUInt32BE(val, 0);\r\n            return b;\r\n        }\r\n        else {\r\n            throw new Error(\"Unsupported length\");\r\n        }\r\n    };\r\n    Object.defineProperty(CRC.prototype, \"table\", {\r\n        get: function () {\r\n            return this._crcTable;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CRC.default = function (name) {\r\n        return CRC\r\n            .defaults\r\n            .find(function (o) { return o.name === name; });\r\n    };\r\n    return CRC;\r\n}());\r\nexports.CRC = CRC;\r\n//# sourceMappingURL=crc.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CrcUtil = (function () {\r\n    function CrcUtil() {\r\n    }\r\n    CrcUtil.Reflect8 = function (val) {\r\n        var resByte = 0;\r\n        for (var i = 0; i < 8; i++) {\r\n            if ((val & (1 << i)) != 0) {\r\n                resByte |= ((1 << (7 - i)) & 0xFF);\r\n            }\r\n        }\r\n        return resByte;\r\n    };\r\n    CrcUtil.Reflect16 = function (val) {\r\n        var resByte = 0;\r\n        for (var i = 0; i < 16; i++) {\r\n            if ((val & (1 << i)) != 0) {\r\n                resByte |= ((1 << (15 - i)) & 0xFFFF);\r\n            }\r\n        }\r\n        return resByte;\r\n    };\r\n    CrcUtil.Reflect32 = function (val) {\r\n        var resByte = 0;\r\n        for (var i = 0; i < 32; i++) {\r\n            if ((val & (1 << i)) != 0) {\r\n                resByte |= ((1 << (31 - i)) & 0xFFFFFFFF);\r\n            }\r\n        }\r\n        return resByte;\r\n    };\r\n    CrcUtil.ReflectGeneric = function (val, width) {\r\n        var resByte = 0;\r\n        for (var i = 0; i < width; i++) {\r\n            if ((val & (1 << i)) != 0) {\r\n                resByte |= (1 << ((width - 1) - i));\r\n            }\r\n        }\r\n        return resByte;\r\n    };\r\n    return CrcUtil;\r\n}());\r\nexports.default = CrcUtil;\r\n//# sourceMappingURL=crcUtil.js.map"]}